name: hb32 mgw102r5 64b

on:
  push:
    branches:
      - 'master'
      - 'main'

jobs:
  build:
    runs-on: windows-latest

    if: github.actor == github.event.repository.owner.login

    steps:
    - name: Checkout harbour/core repo
      uses: actions/checkout@v2
      with:
       repository: harbour/core
       path: harbour

    - name: Install dependencies
      run: |
        (new-object System.Net.WebClient).DownloadFile('https://github.com/brechtsanders/winlibs_mingw/releases/download/10.2.0-11.0.0-8.0.0-r5/winlibs-x86_64-posix-seh-gcc-10.2.0-llvm-11.0.0-mingw-w64-8.0.0-r5.zip', 'C:\temp\mingw.zip')
        Expand-Archive -LiteralPath C:\temp\mingw.zip -DestinationPath C:\mingw -Force
        (new-object System.Net.WebClient).DownloadFile('https://curl.se/windows/dl-7.74.0_2/curl-7.74.0_2-win64-mingw.zip', 'C:\temp\curl774.zip')
        Expand-Archive -LiteralPath C:\temp\curl774.zip -DestinationPath C:\curl774 -Force
        (new-object System.Net.WebClient).DownloadFile('https://curl.se/windows/dl-7.74.0_2/openssl-1.1.1i_2-win64-mingw.zip', 'C:\temp\openssl_111.zip')
        Expand-Archive -LiteralPath C:\temp\openssl_111.zip -DestinationPath C:\openssl_111 -Force

    - name: Compile Harbour
      shell: cmd
      run: |
        cd harbour
        set HB_BUILD_MODE=c
        set HB_USER_PRGFLAGS=-l-
        set HB_BUILD_PARTS=all
        set HB_BUILD_CONTRIBS=
        :: set HB_WITH_OPENSSL=c:\openssl\include
        :: set HB_WITH_CURL=c:\curl\include
        :: set HB_WITH_ADS=c:\acesdk
        set HB_STATIC_OPENSSL=yes
        set HB_STATIC_CURL=yes
        set HB_COMPILER=mingw64
        set HB_BUILD_CONTRIB_DYN=yes
        set HB_BUILD_DYN=yes
        set HB_WITH_LIBHARU=c:\harbour\contrib\hbhpdf
        set path=c:\mingw\mingw64\bin;%path%
        win-make.exe

    - name: Create output folders
      shell: cmd
      run: |
        mkdir output

        echo adding curl 7.73 to harbour binaries
        robocopy C:\curl774\curl-7.74.0_2-win64-mingw\ output\curl_774 /E
        if %ERRORLEVEL% EQU 1 set ERRORLEVEL=0
        echo adding curl ErrorLevel = %ERRORLEVEL%

        echo adding openssl 1.1.1 to harbour binaries
        robocopy C:\openssl_111\openssl-1.1.1i_2-win64-mingw\ output\openssl_111 /E
        if %ERRORLEVEL% EQU 1 set ERRORLEVEL=0
        echo adding openssl ErrorLevel = %ERRORLEVEL%

        robocopy harbour\ output /E
        if %ERRORLEVEL% EQU 1 set ERRORLEVEL=0
        echo %ERRORLEVEL%
        echo creating harbour binaries ErrorLevel = %ERRORLEVEL%

        rmdir output\.git /S /Q
        del output\.git* /S /Q
        del output\os2-make.exe /S /Q
        del output\dos-make.exe /S /Q
        del output\win-make.exe /S /Q
        del output\.travis.yml /S /Q
        rmdir output\package /S /Q
        rmdir output\debian /S /Q
        rmdir output\config /S /Q
        rmdir output\addons /S /Q
        rmdir output\lib\win\mingw64\.hbmk /S /Q
        echo clean objects
        move output\bin\win\mingw64\*.* output\bin
        rmdir output\bin\win /S /Q
        rmdir output\src\rtl\gtwin\obj /S /Q
        rmdir output\src\rtl\gtwvt\obj /S /Q
        rmdir output\src\rtl\gtstd\obj /S /Q
        rmdir output\src\rdd\usrrdd\rdds\obj /S /Q
        :: move output\lib\3rd\win\mingw64\libunicow*.* output\lib\win\mingw
        rmdir output\lib\3rd /S /Q
        rmdir output\src\vm\obj /S /Q
        rmdir output\src\rtl\obj /S /Q
        rmdir output\src\rdd\obj /S /Q
        rmdir output\src\pp\obj /S /Q
        rmdir output\src\nortl\obj /S /Q
        rmdir output\src\main\obj /S /Q
        rmdir output\src\macro\obj /S /Q
        rmdir output\src\lang\obj /S /Q
        rmdir output\src\hbextern\obj /S /Q
        :: rmdir output\src\dynlib\obj /S /Q
        rmdir output\src\debug\obj /S /Q
        rmdir output\src\compiler\obj /S /Q
        rmdir output\src\common\obj /S /Q
        rmdir output\src\codepage\obj /S /Q
        rmdir output\src\3rd\zlib\obj /S /Q
        rmdir output\src\3rd\tiff\obj /S /Q
        rmdir output\src\3rd\png\obj /S /Q
        rmdir output\src\3rd\pcre\obj /S /Q
        rmdir output\src\3rd\jpeg\obj /S /Q
        rmdir output\src\rdd\usrrdd\obj /S /Q
        rmdir output\src\rdd\nulsys\obj /S /Q
        rmdir output\src\rdd\hsx\obj /S /Q
        rmdir output\src\rdd\hbsix\obj /S /Q
        rmdir output\src\rdd\dbfntx\obj /S /Q
        rmdir output\src\rdd\dbfnsx\obj /S /Q
        rmdir output\src\rdd\dbffpt\obj /S /Q
        rmdir output\src\rdd\dbfcdx\obj /S /Q
        rmdir output\src\vm\vmmt\obj /S /Q
        rmdir output\src\vm\mainwin\obj /S /Q
        rmdir output\src\vm\mainstd\obj /S /Q
        rmdir output\src\vm\maindllp\obj /S /Q
        rmdir output\src\vm\maindllh\obj /S /Q
        rmdir output\utils\hbtest\obj /S /Q
        rmdir output\utils\hbmk2\obj /S /Q
        rmdir output\utils\hbi18n\obj /S /Q
        echo end clean objects

        if %ERRORLEVEL% EQU 1 set ERRORLEVEL=0

    - name: Get current time
      uses: srfrnk/current-time@master
      id: current-time
      with:
        format: YYYYMMDD-HH

    - name: Upload Harbour to artifact
      env:
         F_TIME: "${{ steps.current-time.outputs.formattedTime }}"
      uses: actions/upload-artifact@v2
      with:
       name: hb32_mgw102r5_64b_${{ env.F_TIME }}
       path: output
